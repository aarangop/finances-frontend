/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/vehicles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Vehicles */
        get: operations["read_vehicles_vehicles__get"];
        put?: never;
        /** Create Vehicle */
        post: operations["create_vehicle_vehicles__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vehicles/{vehicle_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Vehicle */
        get: operations["read_vehicle_vehicles__vehicle_id__get"];
        /** Update Vehicle */
        put: operations["update_vehicle_vehicles__vehicle_id__put"];
        post?: never;
        /** Delete Vehicle */
        delete: operations["delete_vehicle_vehicles__vehicle_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trips/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Trips */
        get: operations["read_trips_trips__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trips/car": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Car Trips */
        get: operations["read_car_trips_trips_car_get"];
        put?: never;
        /** Create Car Trip */
        post: operations["create_car_trip_trips_car_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trips/car/{trip_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Car Trip */
        get: operations["read_car_trip_trips_car__trip_id__get"];
        /** Update Car Trip */
        put: operations["update_car_trip_trips_car__trip_id__put"];
        post?: never;
        /** Delete Car Trip */
        delete: operations["delete_car_trip_trips_car__trip_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Category */
        post: operations["create_category_categories__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Category */
        get: operations["read_category_categories__category_id__get"];
        put?: never;
        post?: never;
        /** Delete Category */
        delete: operations["delete_category_categories__category_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/expenses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Expenses */
        get: operations["read_expenses_expenses__get"];
        put?: never;
        /** Create Expense */
        post: operations["create_expense_expenses__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/expenses/{expense_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Expense */
        get: operations["read_expense_expenses__expense_id__get"];
        /** Update Expense */
        put: operations["update_expense_expenses__expense_id__put"];
        post?: never;
        /** Delete Expense */
        delete: operations["delete_expense_expenses__expense_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Accounts */
        get: operations["get_accounts_accounts__get"];
        put?: never;
        /** Create Account */
        post: operations["create_account_accounts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account */
        get: operations["get_account_accounts__account_id__get"];
        /** Update Account */
        put: operations["update_account_accounts__account_id__put"];
        post?: never;
        /** Delete Account */
        delete: operations["delete_account_accounts__account_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Account Balance Endpoint */
        put: operations["update_account_balance_endpoint_accounts__account_id__balance_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}/balance/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Balance Updates
         * @description Retrieve balance updates for a specific account within a date range.
         *
         *     Args:
         *         account_id (int): The ID of the account to retrieve balance updates for.
         *         start_date (Optional[datetime], optional): The start date for the balance updates. Defaults to the earliest datetime if not provided.
         *         end_date (Optional[datetime], optional): The end date for the balance updates. Defaults to the current datetime if not provided.
         *         db (Session, optional): The database session dependency. Defaults to a session provided by the get_db dependency.
         *
         *     Returns:
         *         List[BalanceUpdateModel]: A list of balance updates matching the criteria.
         */
        get: operations["get_account_balance_updates_accounts__account_id__balance_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccountBaseSchema */
        AccountBaseSchema: {
            /** Bank */
            bank: string;
            /** Holder */
            holder: string;
            /** Balance */
            balance: number;
            /** @default COP */
            currency: components["schemas"]["app__models__currency__Currency__2"];
            /** Account Number */
            account_number: string;
            /** Account Alias */
            account_alias: string;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["ExpenseSchema"][];
        };
        /** AccountCreateSchema */
        AccountCreateSchema: {
            /** Bank */
            bank: string;
            /** Holder */
            holder: string;
            /** Balance */
            balance: number;
            /** @default COP */
            currency: components["schemas"]["app__models__currency__Currency__2"];
            /** Account Number */
            account_number: string;
            /** Account Alias */
            account_alias: string;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["ExpenseSchema"][];
        };
        /** AccountSchema */
        AccountSchema: {
            /** Bank */
            bank: string;
            /** Holder */
            holder: string;
            /** Balance */
            balance: number;
            /** @default COP */
            currency: components["schemas"]["app__models__currency__Currency__2"];
            /** Account Number */
            account_number: string;
            /** Account Alias */
            account_alias: string;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["ExpenseSchema"][];
            /** Id */
            id: number;
        };
        /** BalanceUpdateCreateSchema */
        BalanceUpdateCreateSchema: {
            /** Balance */
            balance: number;
            /**
             * Timestamp
             * Format: date-time
             * @default 2024-11-20T14:25:05.584497Z
             */
            timestamp: string;
            /** Account Id */
            account_id: number;
        };
        /** BalanceUpdateSchema */
        BalanceUpdateSchema: {
            /** Balance */
            balance: number;
            /** Timestamp */
            timestamp: string;
            /** Id */
            id: number;
            /** Account Id */
            account_id: number;
            /** Old Balance */
            old_balance: number;
        };
        /** CarTripCreateSchema */
        CarTripCreateSchema: {
            /** Origin */
            origin: string;
            /** Destination */
            destination: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * End Date
             * Format: date
             */
            end_date: string;
            /** @default car */
            mode_of_transport: components["schemas"]["ModeOfTransport"];
            /**
             * Round Trip
             * @default true
             */
            round_trip: boolean;
            /**
             * International
             * @default false
             */
            international: boolean;
            /** Distance */
            distance: number | null;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["TravelExpenseSchema"][];
            /** Odometer Start */
            odometer_start: number | null;
            /** Odometer End */
            odometer_end: number | null;
            vehicle: components["schemas"]["VehicleSchema"] | null;
        };
        /** CarTripSchema */
        "CarTripSchema-Input": {
            /** Origin */
            origin: string;
            /** Destination */
            destination: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * End Date
             * Format: date
             */
            end_date: string;
            /** @default car */
            mode_of_transport: components["schemas"]["ModeOfTransport"];
            /**
             * Round Trip
             * @default true
             */
            round_trip: boolean;
            /**
             * International
             * @default false
             */
            international: boolean;
            /** Distance */
            distance: number | null;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["TravelExpenseSchema"][];
            /** Odometer Start */
            odometer_start: number | null;
            /** Odometer End */
            odometer_end: number | null;
            vehicle: components["schemas"]["VehicleSchema"] | null;
            /** Id */
            id: number;
        };
        /** CarTripSchema */
        "CarTripSchema-Output": {
            /** Origin */
            origin: string;
            /** Destination */
            destination: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * End Date
             * Format: date
             */
            end_date: string;
            /** @default car */
            mode_of_transport: components["schemas"]["ModeOfTransport"];
            /**
             * Round Trip
             * @default true
             */
            round_trip: boolean;
            /**
             * International
             * @default false
             */
            international: boolean;
            /** Distance */
            distance: number | null;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["TravelExpenseSchema"][];
            /** Odometer Start */
            odometer_start: number | null;
            /** Odometer End */
            odometer_end: number | null;
            vehicle: components["schemas"]["VehicleSchema"] | null;
            /** Id */
            id: number;
        };
        /** CategoryCreateSchema */
        CategoryCreateSchema: {
            /**
             * Name
             * @description The name of the category
             */
            name: string;
        };
        /** CategorySchema */
        CategorySchema: {
            /**
             * Name
             * @description The name of the category
             */
            name: string;
            /** Id */
            id: number;
        };
        /** ExpenseCreateSchema */
        ExpenseCreateSchema: {
            /**
             * Description
             * @description A brief description of the expense
             */
            description: string;
            /**
             * Amount
             * @description The amount of money spent
             */
            amount: number;
            /**
             * Currency
             * @description The currency of the expense
             * @default COP
             * @enum {string}
             */
            currency: "COP" | "USD" | "EUR";
            /**
             * Exchange Rate
             * @description The exchange rate of the currency to the base currency
             * @default 1
             */
            exchange_rate: number;
            /**
             * Categories
             * @description A list of category IDs associated with the expense
             */
            categories?: components["schemas"]["CategorySchema"][] | null;
            /**
             * Account Id
             * @description Account ID associated with the expense
             */
            account_id?: number | null;
        };
        /** ExpenseSchema */
        ExpenseSchema: {
            /**
             * Description
             * @description A brief description of the expense
             */
            description: string;
            /**
             * Amount
             * @description The amount of money spent
             */
            amount: number;
            /**
             * Currency
             * @description The currency of the expense
             * @default COP
             * @enum {string}
             */
            currency: "COP" | "USD" | "EUR";
            /**
             * Exchange Rate
             * @description The exchange rate of the currency to the base currency
             * @default 1
             */
            exchange_rate: number;
            /**
             * Categories
             * @description A list of category IDs associated with the expense
             */
            categories?: components["schemas"]["CategorySchema"][] | null;
            /**
             * Account Id
             * @description Account ID associated with the expense
             */
            account_id?: number | null;
            /** Id */
            id: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ModeOfTransport
         * @constant
         * @enum {string}
         */
        ModeOfTransport: "car";
        /** TravelExpenseSchema */
        TravelExpenseSchema: {
            /**
             * Description
             * @description A brief description of the expense
             */
            description: string;
            /**
             * Amount
             * @description The amount of money spent
             */
            amount: number;
            /**
             * Currency
             * @description The currency of the expense
             * @default COP
             * @enum {string}
             */
            currency: "COP" | "USD" | "EUR";
            /**
             * Exchange Rate
             * @description The exchange rate of the currency to the base currency
             * @default 1
             */
            exchange_rate: number;
            /**
             * Categories
             * @description A list of category IDs associated with the expense
             */
            categories?: components["schemas"]["CategorySchema"][] | null;
            /**
             * Account Id
             * @description Account ID associated with the expense
             */
            account_id?: number | null;
            /** Id */
            id: number;
        };
        /** TripSchema */
        TripSchema: {
            /** Origin */
            origin: string;
            /** Destination */
            destination: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * End Date
             * Format: date
             */
            end_date: string;
            /** @default car */
            mode_of_transport: components["schemas"]["ModeOfTransport"];
            /**
             * Round Trip
             * @default true
             */
            round_trip: boolean;
            /**
             * International
             * @default false
             */
            international: boolean;
            /** Distance */
            distance: number | null;
            /**
             * Expenses
             * @default []
             */
            expenses: components["schemas"]["TravelExpenseSchema"][];
            /** Id */
            id: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VehicleCreateSchema */
        VehicleCreateSchema: {
            /** Name */
            name: string;
            /** Make */
            make: string;
            /** Model */
            model: string;
            /** Year */
            year: number;
            /** Odometer */
            odometer: number;
            /** License Plate */
            license_plate: string;
            /** Color */
            color?: string;
            /** @default car */
            vehicle_type: components["schemas"]["VehicleType"];
        };
        /** VehicleSchema */
        VehicleSchema: {
            /** Name */
            name: string;
            /** Make */
            make: string;
            /** Model */
            model: string;
            /** Year */
            year: number;
            /** Odometer */
            odometer: number;
            /** License Plate */
            license_plate: string;
            /** Color */
            color?: string;
            /** @default car */
            vehicle_type: components["schemas"]["VehicleType"];
            /** Id */
            id: number;
        };
        /**
         * VehicleType
         * @enum {string}
         */
        VehicleType: "car" | "motorcycle" | "truck";
        /**
         * Currency
         * @default COP
         * @enum {string}
         */
        app__models__currency__Currency__1: "COP" | "USD" | "EUR";
        /**
         * Currency
         * @enum {string}
         */
        app__models__currency__Currency__2: "COP" | "USD" | "EUR";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_vehicles_vehicles__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_vehicle_vehicles__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_vehicle_vehicles__vehicle_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vehicle_vehicles__vehicle_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vehicle_vehicles__vehicle_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_trips_trips__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TripSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_car_trips_trips_car_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarTripSchema-Output"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_car_trip_trips_car_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CarTripCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarTripSchema-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_car_trip_trips_car__trip_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarTripSchema-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_car_trip_trips_car__trip_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trip_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CarTripSchema-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarTripSchema-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_car_trip_trips_car__trip_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trip_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_category_categories__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_category_categories__category_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_category_categories__category_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_expenses_expenses__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseSchema"][];
                };
            };
        };
    };
    create_expense_expenses__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpenseCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_expense_expenses__expense_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                expense_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_expense_expenses__expense_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpenseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_expense_expenses__expense_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                expense_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_accounts_accounts__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_account_accounts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_accounts__account_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_account_accounts__account_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountBaseSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_account_accounts__account_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_account_balance_endpoint_accounts__account_id__balance_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BalanceUpdateCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BalanceUpdateSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_balance_updates_accounts__account_id__balance_history_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BalanceUpdateSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
